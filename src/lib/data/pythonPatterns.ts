export const pythonPatterns = {
  'react-agent': "# ReAct Agent implementation\nimport openai\nimport json\nfrom typing import Dict, List, Any, Optional, Union\n\nclass ReActAgent:\n    def __init__(self, client, model: str = \"gpt-4\"):\n        self.client = client\n        self.model = model\n        \n    async def execute(self, query: str, max_cycles: int = 5) -> Dict[str, Any]:\n        \"\"\"Execute the ReAct agent to solve a problem through reasoning and action cycles.\"\"\"\n        # Implementation code would go here\n        pass",

  'codeact-agent': "# CodeAct Agent implementation\nimport openai\nimport re\nimport json\nfrom typing import Dict, List, Any, Optional, Union\n\nclass CodeActAgent:\n    def __init__(self, client, model: str = \"gpt-4\"):\n        self.client = client\n        self.model = model\n        \n    async def execute(self, query: str, max_cycles: int = 5) -> Dict[str, Any]:\n        \"\"\"Execute the CodeAct agent to solve problems by writing and executing Python code.\"\"\"\n        # Implementation code would go here\n        pass",

  'self-reflection': "# Self-Reflection implementation\nimport openai\nimport re\nimport json\nfrom typing import Dict, List, Any, Optional, Union\n\nclass SelfReflectionAgent:\n    def __init__(self, client, model: str = \"gpt-4\"):\n        self.client = client\n        self.model = model\n        \n    async def execute(self, query: str, max_revisions: int = 3) -> Dict[str, Any]:\n        \"\"\"Execute the Self-Reflection agent to improve responses through iterative critique.\"\"\"\n        # Implementation code would go here\n        pass",

  'agentic-rag': "# Agentic RAG implementation\nimport openai\nimport json\nimport re\nfrom typing import Dict, List, Any, Optional, Union\n\nclass AgenticRAGAgent:\n    def __init__(self, client, model: str = \"gpt-4\"):\n        self.client = client\n        self.model = model\n        \n    async def execute(self, query: str) -> Dict[str, Any]:\n        \"\"\"Execute the Agentic RAG agent to retrieve and synthesize information.\"\"\"\n        # Implementation code would go here\n        pass",

  'modern-tool-use': "# Modern Tool Use implementation\nimport openai\nimport json\nfrom typing import Dict, List, Any, Optional, Union\n\nclass ModernToolUseAgent:\n    def __init__(self, client, model: str = \"gpt-4\"):\n        self.client = client\n        self.model = model\n        \n    async def execute(self, query: str) -> Dict[str, Any]:\n        \"\"\"Execute the Modern Tool Use agent to leverage tools via MCP.\"\"\"\n        # Implementation code would go here\n        pass"
};